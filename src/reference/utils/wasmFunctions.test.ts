import { addFields, addGroups, doubleField, groupScalarMul } from "./wasmFunctions";

describe('wasmFunctions', () => {
  describe('addFields', () => {
    it.each([
      ['1field', '2field', '3field'],
      ['8444461749428370424248824938781546531375899335154063827935233455917409239040field', '2field', '1field'],
      ['1684996666696914987166688442938726917102321526408785780068975640575field', '1684996666696914987166688442938726917102321526408785780068975640575field', '3369993333393829974333376885877453834204643052817571560137951281150field']
    ])('adds two fields', async (input1: string, input2: string, expected: string) => {
      const result = await addFields(input1, input2);

      expect(result).toBe(expected);
    });
  });
  
  describe('doubleField', () => {
    it.each([
      ['1field', '2field'],
      ['8444461749428370424248824938781546531375899335154063827935233455917409239040field', '8444461749428370424248824938781546531375899335154063827935233455917409239039field'],
      ['1684996666696914987166688442938726917102321526408785780068975640575field', '3369993333393829974333376885877453834204643052817571560137951281150field']
    ])('doubles the field', async (input: string, expected: string) => {
      const result = await doubleField(input);

      expect(result).toBe(expected);
    });
  });

  describe('addGroups', () => {
    it.each([
      ['8172491321683091888948767720126491291334498151367935174834739919916587902885group', '6398616098668069932591809496969092508189703886845851538529306481398791254505group', '6098884730637101648176576569680682097727731315679939226583145374341012652933group'],
      ['5265081760859433483133294014934052209218999610322594178767498019044206417582group', '2063000405888842163751349173523051445370584893047038564267648437120577005175group', '6476202634512227671235877046929344087427366950393375000521665681337155323321group'],
      ['2267804453849548326441105932178046088516965666196959520730613219383769450836group', '4407911307578806921901458939347649080208231626630832716981525978619048166152group', '5786258225753402907650271726047597104252057332301870339194408122376703625189group'],
      ['4644020117506100108114238681686210885380126709522154112824613061426159571896group', '4644020117506100108114238681686210885380126709522154112824613061426159571896group', '4368133022969454257850374558672411800299209285195778089440085290555701516667group'],
      ['7567318425042049695485063481352884626263173541493743764753928133860027560480group', '7567318425042049695485063481352884626263173541493743764753928133860027560480group', '5042473777803417606579440401406822102329732371743950988738806767808616709467group']
    ])('adds two groups', async (input1: string, input2: string, expected: string) => {
      const result = await addGroups(input1, input2);
      expect(result).toBe(expected);
    });
  });

  describe('groupScalarMul', () => {
    it.each([
      ['4541840636887708036714559817495407429189575168354480822933150714442012162643group', '125325161507509325346578589838941278533045954469449950613276078176224054210scalar', '6444119914335573715335918680414238993802948789453145346737287055543838829565group'],
      ['2796670805570508460920584878396618987767121022598342527208237783066948667246group', '1753533570350686550323082834194063544688355123444645930667634514069517491627scalar', '5324992470787461040823919570440348586607207885188029730405305593254964962313group']
    ])('multiples groups by scalars', async (input1: string, input2: string, expected: string) => {
      const result = await groupScalarMul(input1, input2);
      expect(result).toBe(expected);
    });
  });
});
